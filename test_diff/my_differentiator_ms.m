% This is the template file for my_differentiator_ms generated by
% MAPP's Model Starter, 2018-Jul-04--20-01-59 (24-hour format).
%
% Your model's equations are in the following format:
%
% Equations for the explicit outputs:
%   [ipinref; vpoutref] = d/dt(qe(...)) + fe(...); 
%   - Please fill in your code in the functions qe
%     and fe below to compute and return [ipinref; vpoutref].
%     See the comments within these functions.
%   - Note: You don't need to (and should not!) attempt
%     to handle the d/dt operator within your code. The
%     simulator will handle d/dt automatically. You
%     should only provide, in qe(...), the quantities
%     that are differentiated - eg, charges and fluxes.
%

function MOD = my_differentiator_ms()
    MOD = ee_model();
    MOD = add_to_ee_model(MOD, 'name', 'my_differentiator_ms');
    MOD = add_to_ee_model(MOD, 'terminals', {'pin', 'pout', 'ref'});
    MOD = add_to_ee_model(MOD, 'explicit_outs', {'ipinref', 'vpoutref'});

    % Please enter the parameter(s) using the following template:
    % MOD = add_to_ee_model(MOD, 'parms', {'parm1_name', default_val1});
    %                                             ^            ^         
    %                                              CHANGE THESE          
    % MOD = add_to_ee_model(MOD, 'parms', {'parm2_name', default_val2});
    %                                             ^            ^         
    %                                              CHANGE THESE          

    MOD = add_to_ee_model(MOD, 'parms', {'k', 1.0});
    MOD = add_to_ee_model(MOD, 'parms', {'Rin', 1e3});
    
    MOD = add_to_ee_model(MOD, 'fe', @fe);
    MOD = add_to_ee_model(MOD, 'qe', @qe);

    MOD = finish_ee_model(MOD);
end % my_differentiator_ms

function out = fe(S)
    % You need to fill in this function with equations
    % for the explicit output(s) of your device model.
    %
    % The explicit outputs you entered in the model starter
    % are:
    %   ipinref, vpoutref
    %
    % The algebraic parts of these explicit outputs, i.e.,
    % ipinref_fe, vpoutref_fe, are returned in out, which
    % is a vector (of size 2 in this case). It MUST BE
    % a COLUMN VECTOR (not a row vector). Please set
    % up your explicit outputs like this:
    %
    % out(1,1) = <some code that returns ipinref_fe>;
    % out(2,1) = <some code that returns vpoutref_fe>;
    %
    % Below, the first line you will see is v2struct(S).
    % This populates your workspace within this function
    % with variables corresponding to the device's parameters
    % and relevant branch voltages/currents.
    % These variables are available in this function's local
    % scope, so you can use them directly in your code below
    %
    % For example, if you defined parameters R and C above
    % using lines of the form
    %   MOD = add_to_ee_model(MOD, 'parms', {'R', 1000.0}),
    %   MOD = add_to_ee_model(MOD, 'parms', {'C', 1e-6}),
    % then you can use R and C anywhere in your code below, eg,
    %   tau = R*C;
    %
    % In the same way, you also have access to the following
    % relevant branch quantities and internal unknowns, using
    % which your code should compute the entries of out as 
    % described above:
    %   ipoutref, vpinref
    %   
    % (You do not have access to ipinref, vpoutref because they are
    %  explicit outputs).

    v2struct(S);

    % PLEASE PUT YOUR CODE SETTING UP out HERE

    ipinref_fe = vpinref / Rin;
    vpoutref_fe = 0;

    out(1, 1) = ipinref_fe;
    out(2, 1) = vpoutref_fe;
end % fe

function out = qe(S)
    % You need to fill in this function with equations
    % for the explicit output(s) of your device model.
    %
    % The explicit outputs you entered in the model starter
    % are:
    %   ipinref, vpoutref
    %
    % The d/dt parts of these explicit outputs, i.e.,
    % ipinref_qe, vpoutref_qe, are returned in out, which
    % is a vector (of size 2 in this case). It MUST BE
    % a COLUMN VECTOR (not a row vector). Please set
    % up your explicit outputs like this:
    %
    % out(1,1) = <some code that returns ipinref_qe>;
    % out(2,1) = <some code that returns vpoutref_qe>;
    %
    % Below, the first line you will see is v2struct(S).
    % This populates your workspace within this function
    % with variables corresponding to the device's parameters
    % and relevant branch voltages/currents.
    % These variables are available in this function's local
    % scope, so you can use them directly in your code below
    %
    % For example, if you defined parameters R and C above
    % using lines of the form
    %   MOD = add_to_ee_model(MOD, 'parms', {'R', 1000.0}),
    %   MOD = add_to_ee_model(MOD, 'parms', {'C', 1e-6}),
    % then you can use R and C anywhere in your code below, eg,
    %   tau = R*C;
    %
    % In the same way, you also have access to the following
    % relevant branch quantities and internal unknowns, using
    % which your code should compute the entries of out as 
    % described above:
    %   ipoutref, vpinref
    %   
    % (You do not have access to ipinref, vpoutref because they are
    %  explicit outputs).

    v2struct(S);

    % PLEASE PUT YOUR CODE SETTING UP out HERE

    ipinref_qe = 0;
    vpoutref_qe = k*vpinref;

    out(1, 1) = ipinref_qe;
    out(2, 1) = vpoutref_qe;
end % qe
